// Generated by CoffeeScript 1.6.3
(function() {
  'NekoCSP - 2013\n\nCopyright (C) 2013 Darko Mikulic\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and \nassociated documentation files (the "Software"), to deal in the Software without restriction,\nincluding without limitation the rights to use, copy, modify, merge, publish, distribute,\nsublicense, and/or sell copies of the Software, and to permit persons to whom the Software is \nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or\nsubstantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT\nNOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES\nOR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.';
  var Problem, at_least_one, at_most_one, combinations, convert_consraints, find_solution, getParams, init_sat_variables, lazyProduct, reg, zip,
    __slice = [].slice,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  Problem = (function() {
    function Problem() {
      this.sat_var_counter = 1;
      this.csp_variables = {};
      this.sat_variables = {};
      this.constraints = [];
      this.cnf_formula = [];
      this.sat_solution = [];
      this.csp_solution = {};
    }

    Problem.prototype.convert = function() {
      init_sat_variables(this);
      at_least_one(this);
      at_most_one(this);
      return convert_consraints(this);
    };

    Problem.prototype.solve = function() {
      var s, sat;
      console.log("Starting CSP conversion...");
      this.convert();
      console.log("CSP conversion finished");
      sat = new SatSolver(this.cnf_formula);
      console.log("Starting SAT solving...");
      s = sat.solve();
      console.log("SAT solving finished");
      if (!s) {
        return false;
      } else {
        this.sat_solution = s;
        return find_solution(this);
      }
    };

    Problem.prototype.alldifferent = function(li) {
      var genfunc, pairs, x, _i, _len, _results;
      pairs = combinations(li, 2);
      genfunc = function(a, b) {
        return "new Function('" + a + "','" + b + "', 'return " + a + " != " + b + ";');";
      };
      _results = [];
      for (_i = 0, _len = pairs.length; _i < _len; _i++) {
        x = pairs[_i];
        _results.push(this.constraints.push(eval(genfunc.apply(null, x))));
      }
      return _results;
    };

    Problem.prototype.isequal = function(variable, value) {
      var genfunc;
      genfunc = function(a, b) {
        return "new Function('" + a + "', 'return " + a + " == " + b + ";');";
      };
      return this.constraints.push(eval(genfunc(variable, value)));
    };

    return Problem;

  })();

  init_sat_variables = function(p) {
    var v, var_len, _i, _ref, _ref1, _results, _results1;
    _results = [];
    for (v in p.csp_variables) {
      var_len = p.csp_variables[v].length;
      p.sat_variables[v] = (function() {
        _results1 = [];
        for (var _i = _ref = p.sat_var_counter, _ref1 = p.sat_var_counter + var_len - 1; _ref <= _ref1 ? _i <= _ref1 : _i >= _ref1; _ref <= _ref1 ? _i++ : _i--){ _results1.push(_i); }
        return _results1;
      }).apply(this);
      _results.push(p.sat_var_counter += var_len);
    }
    return _results;
  };

  at_least_one = function(p) {
    var v, _results;
    _results = [];
    for (v in p.csp_variables) {
      _results.push(p.cnf_formula.push(p.sat_variables[v]));
    }
    return _results;
  };

  at_most_one = function(p) {
    var c, v, x, _results;
    _results = [];
    for (v in p.csp_variables) {
      _results.push((function() {
        var _i, _len, _ref, _results1;
        _ref = combinations(p.sat_variables[v], 2);
        _results1 = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          c = _ref[_i];
          _results1.push(p.cnf_formula.push((function() {
            var _j, _len1, _results2;
            _results2 = [];
            for (_j = 0, _len1 = c.length; _j < _len1; _j++) {
              x = c[_j];
              _results2.push(-x);
            }
            return _results2;
          })()));
        }
        return _results1;
      })());
    }
    return _results;
  };

  convert_consraints = function(p) {
    var addProduct, clause, doms_product, f, fdoms, fvars, idxs, issat, sat_vars, v, values, var_name, x, _i, _len, _ref, _results;
    _ref = p.constraints;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      f = _ref[_i];
      fvars = getParams(f);
      fdoms = (function() {
        var _j, _len1, _results1;
        _results1 = [];
        for (_j = 0, _len1 = fvars.length; _j < _len1; _j++) {
          var_name = fvars[_j];
          _results1.push(p.csp_variables[var_name]);
        }
        return _results1;
      })();
      doms_product = [];
      addProduct = function() {
        var x;
        x = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        return doms_product.push(x);
      };
      lazyProduct(fdoms, addProduct);
      _results.push((function() {
        var _j, _len1, _results1;
        _results1 = [];
        for (_j = 0, _len1 = doms_product.length; _j < _len1; _j++) {
          values = doms_product[_j];
          issat = f.apply(null, values);
          if (!issat) {
            idxs = (function() {
              var _k, _len2, _ref1, _results2;
              _ref1 = zip(fvars, values);
              _results2 = [];
              for (_k = 0, _len2 = _ref1.length; _k < _len2; _k++) {
                v = _ref1[_k];
                _results2.push(p.csp_variables[v[0]].indexOf(v[1]));
              }
              return _results2;
            })();
            sat_vars = (function() {
              var _k, _len2, _ref1, _results2;
              _ref1 = zip(fvars, idxs);
              _results2 = [];
              for (_k = 0, _len2 = _ref1.length; _k < _len2; _k++) {
                v = _ref1[_k];
                _results2.push(p.sat_variables[v[0]][v[1]]);
              }
              return _results2;
            })();
            clause = (function() {
              var _k, _len2, _results2;
              _results2 = [];
              for (_k = 0, _len2 = sat_vars.length; _k < _len2; _k++) {
                x = sat_vars[_k];
                _results2.push(-x);
              }
              return _results2;
            })();
            _results1.push(p.cnf_formula.push(clause));
          } else {
            _results1.push(void 0);
          }
        }
        return _results1;
      })());
    }
    return _results;
  };

  reg = /\(([\s\S]*?)\)/;

  getParams = function(func) {
    var params, x, _i, _len, _results;
    if (func.length) {
      params = reg.exec(func)[1].split(',');
      _results = [];
      for (_i = 0, _len = params.length; _i < _len; _i++) {
        x = params[_i];
        _results.push(x.trim());
      }
      return _results;
    } else {
      return [];
    }
  };

  combinations = function(xs, m) {
    var a, f, s;
    if (m === 0) {
      return [[]];
    } else if (xs.length === 0) {
      return [];
    } else {
      f = (function() {
        var _i, _len, _ref, _results;
        _ref = combinations(xs.slice(1), m - 1);
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          a = _ref[_i];
          _results.push(xs.slice(0, 1).concat(a));
        }
        return _results;
      })();
      s = combinations(xs.slice(1), m);
      return f.concat(s);
    }
  };

  zip = function(arr1, arr2) {
    var x, _i, _ref, _results;
    _results = [];
    for (x = _i = 0, _ref = Math.min(arr1.length, arr2.length) - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; x = 0 <= _ref ? ++_i : --_i) {
      _results.push([arr1[x], arr2[x]]);
    }
    return _results;
  };

  lazyProduct = function (sets,f,context){
    if (!context) context=this;
    var p=[],max=sets.length-1,lens=[];
    for (var i=sets.length;i--;) lens[i]=sets[i].length;
    function dive(d){
        var a=sets[d], len=lens[d];
        if (d==max) for (var i=0;i<len;++i) p[d]=a[i], f.apply(context,p);
        else        for (var i=0;i<len;++i) p[d]=a[i], dive(d+1);
        p.pop();
    }
    dive(0);
};

  find_solution = function(p) {
    var idx, key, positive, sol, vals, x, _i, _len, _ref;
    positive = (function() {
      var _i, _len, _ref, _results;
      _ref = p.sat_solution;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        x = _ref[_i];
        if (x > 0) {
          _results.push(x);
        }
      }
      return _results;
    })();
    for (_i = 0, _len = positive.length; _i < _len; _i++) {
      sol = positive[_i];
      _ref = p.sat_variables;
      for (key in _ref) {
        vals = _ref[key];
        if (__indexOf.call(vals, sol) >= 0) {
          idx = vals.indexOf(sol);
          p.csp_solution[key] = p.csp_variables[key][idx];
        }
      }
    }
    return p.csp_solution;
  };

  window.Problem = Problem;

  /*
  p = new Problem
  
  p.csp_variables['x'] = [2,3,4,5,6]
  
  p.csp_variables['y'] = [2,3,4,5,6]
  
  p.constraints = [
      (x, y) -> x + y <= 7,
      (x, y) -> x == 3 and y == 4,
  ]
  
  p.convert()
  p.sat_solution = [-1,2,-3,-4,-5,-6,-7,8,-9,-10]
  
  find_solution(p)
  
  console.log p.csp_solution
  */


}).call(this);
